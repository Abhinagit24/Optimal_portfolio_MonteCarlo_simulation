ticker <- c('DIS','HPQ','USO','DVN','LMT')
for(x in 1:(length(ticker) - 1)){
s1 <- getSymbols(ticker[x],from = Sys.Date() - 150, to = Sys.Date(),auto.assign = FALSE)
mu1 <- mean(total_returns[[x]])
sigma1 <- sd(total_returns[[x]])
for(y in (x+1):length(ticker)){
s2 <- getSymbols(ticker[y],from = Sys.Date() - 150, to = Sys.Date(),auto.assign = FALSE)
mu2 <- mean(total_returns[[y]])
sigma2 <- sd(total_returns[[y]])
ClosePrices <- merge(Cl(s1),Cl(s2))
# Calculating the correlation coefficient(rho) of each pairs of stocks
rho_12 <- cor(ClosePrices, use = "pairwise.complete.obs")[1,2]
# Printing the rho values
# finding the total return and total risk
total_return <- function(w){
return(w*mu1 + (1-w)*mu2)
}
total_risk <- function(w){
return(w^2*sigma1^2 + (1-w)^2*sigma2^2 + 2*w*(1-w)*rho_12*sigma1*sigma2)
}
# taking all values from -1 to 1 with a step value of 0.01 for weights
weights <- seq(-1, 1, by = 0.01)
returns <- NULL
risks <- NULL
for(w in weights){
returns <- c(returns, total_return(w))
risks <- c(risks, total_risk(w))
}
min_risk_w <- weights[which(risks == min(risks))]
#min_w_list[x] <- min_risk_w
min_risk_return <- mean(total_return(min_risk_w))
#min_return_list[x] <- min_risk_return
efficient_idx <- which(returns >= min_risk_return)
inefficient_idx <- which(returns < min_risk_return)
plot(risks[efficient_idx], returns[efficient_idx],
xlab = "Portfolio risk",
ylab = "Portfolio return",
main = paste("The Efficient Frontier (",ticker[x],",",ticker[y],")"),
ylim = c(-0.1,0.2), xlim = c(0.00, 0.02))
lines(risks[inefficient_idx], returns[inefficient_idx], lty = "dotted")
abline(h = min_risk_return)
text(x = 0.003, y = min_risk_return-0.01, "min variance portfolio")
text(x = 0.006, y = 0.15, "efficient frontier")
print(paste("(",ticker[x],",",ticker[y],") - Rho_12 - ",rho_12))
}
print(min_return_w)
}
ticker <- c('DIS','HPQ','USO','DVN','LMT')
for(x in 1:(length(ticker) - 1)){
s1 <- getSymbols(ticker[x],from = Sys.Date() - 150, to = Sys.Date(),auto.assign = FALSE)
mu1 <- mean(total_returns[[x]])
sigma1 <- sd(total_returns[[x]])
for(y in (x+1):length(ticker)){
s2 <- getSymbols(ticker[y],from = Sys.Date() - 150, to = Sys.Date(),auto.assign = FALSE)
mu2 <- mean(total_returns[[y]])
sigma2 <- sd(total_returns[[y]])
ClosePrices <- merge(Cl(s1),Cl(s2))
# Calculating the correlation coefficient(rho) of each pairs of stocks
rho_12 <- cor(ClosePrices, use = "pairwise.complete.obs")[1,2]
# Printing the rho values
# finding the total return and total risk
total_return <- function(w){
return(w*mu1 + (1-w)*mu2)
}
total_risk <- function(w){
return(w^2*sigma1^2 + (1-w)^2*sigma2^2 + 2*w*(1-w)*rho_12*sigma1*sigma2)
}
# taking all values from -1 to 1 with a step value of 0.01 for weights
weights <- seq(-1, 1, by = 0.01)
returns <- NULL
risks <- NULL
for(w in weights){
returns <- c(returns, total_return(w))
risks <- c(risks, total_risk(w))
}
min_risk_w <- weights[which(risks == min(risks))]
#min_w_list[x] <- min_risk_w
min_risk_return <- mean(total_return(min_risk_w))
#min_return_list[x] <- min_risk_return
efficient_idx <- which(returns >= min_risk_return)
inefficient_idx <- which(returns < min_risk_return)
plot(risks[efficient_idx], returns[efficient_idx],
xlab = "Portfolio risk",
ylab = "Portfolio return",
main = paste("The Efficient Frontier (",ticker[x],",",ticker[y],")"),
ylim = c(-0.1,0.2), xlim = c(0.00, 0.02))
lines(risks[inefficient_idx], returns[inefficient_idx], lty = "dotted")
abline(h = min_risk_return)
text(x = 0.003, y = min_risk_return-0.01, "min variance portfolio")
text(x = 0.006, y = 0.15, "efficient frontier")
print(paste("(",ticker[x],",",ticker[y],") - Rho_12 - ",rho_12))
}
print(min_risk_w)
}
ticker <- c('DIS','HPQ','USO','DVN','LMT')
for(x in 1:(length(ticker) - 1)){
s1 <- getSymbols(ticker[x],from = Sys.Date() - 150, to = Sys.Date(),auto.assign = FALSE)
mu1 <- mean(total_returns[[x]])
sigma1 <- sd(total_returns[[x]])
for(y in (x+1):length(ticker)){
s2 <- getSymbols(ticker[y],from = Sys.Date() - 150, to = Sys.Date(),auto.assign = FALSE)
mu2 <- mean(total_returns[[y]])
sigma2 <- sd(total_returns[[y]])
ClosePrices <- merge(Cl(s1),Cl(s2))
# Calculating the correlation coefficient(rho) of each pairs of stocks
rho_12 <- cor(ClosePrices, use = "pairwise.complete.obs")[1,2]
# Printing the rho values
# finding the total return and total risk
total_return <- function(w){
return(w*mu1 + (1-w)*mu2)
}
total_risk <- function(w){
return(w^2*sigma1^2 + (1-w)^2*sigma2^2 + 2*w*(1-w)*rho_12*sigma1*sigma2)
}
# taking all values from -1 to 1 with a step value of 0.01 for weights
weights <- seq(-1, 1, by = 0.01)
returns <- NULL
risks <- NULL
for(w in weights){
returns <- c(returns, total_return(w))
risks <- c(risks, total_risk(w))
}
min_risk_w <- weights[which(risks == min(risks))]
#min_w_list[x] <- min_risk_w
min_risk_return <- mean(total_return(min_risk_w))
#min_return_list[x] <- min_risk_return
efficient_idx <- which(returns >= min_risk_return)
inefficient_idx <- which(returns < min_risk_return)
plot(risks[efficient_idx], returns[efficient_idx],
xlab = "Portfolio risk",
ylab = "Portfolio return",
main = paste("The Efficient Frontier (",ticker[x],",",ticker[y],")"),
ylim = c(-0.1,0.2), xlim = c(0.00, 0.02))
lines(risks[inefficient_idx], returns[inefficient_idx], lty = "dotted")
abline(h = min_risk_return)
text(x = 0.003, y = min_risk_return-0.01, "min variance portfolio")
text(x = 0.006, y = 0.15, "efficient frontier")
print(paste("(",ticker[x],",",ticker[y],") - Rho_12 - ",rho_12))
print(min_risk_w)
}
}
ticker <- c('DIS','HPQ','USO','DVN','LMT')
for(x in 1:(length(ticker) - 1)){
s1 <- getSymbols(ticker[x],from = Sys.Date() - 150, to = Sys.Date(),auto.assign = FALSE)
mu1 <- mean(total_returns[[x]])
sigma1 <- sd(total_returns[[x]])
for(y in (x+1):length(ticker)){
s2 <- getSymbols(ticker[y],from = Sys.Date() - 150, to = Sys.Date(),auto.assign = FALSE)
mu2 <- mean(total_returns[[y]])
sigma2 <- sd(total_returns[[y]])
ClosePrices <- merge(Cl(s1),Cl(s2))
# Calculating the correlation coefficient(rho) of each pairs of stocks
rho_12 <- cor(ClosePrices, use = "pairwise.complete.obs")[1,2]
# Printing the rho values
# finding the total return and total risk
total_return <- function(w){
return(w*mu1 + (1-w)*mu2)
}
total_risk <- function(w){
return(w^2*sigma1^2 + (1-w)^2*sigma2^2 + 2*w*(1-w)*rho_12*sigma1*sigma2)
}
# taking all values from -1 to 1 with a step value of 0.01 for weights
weights <- seq(-1, 1, by = 0.01)
returns <- NULL
risks <- NULL
for(w in weights){
returns <- c(returns, total_return(w))
risks <- c(risks, total_risk(w))
}
min_risk_w <- weights[which(risks == min(risks))]
#min_w_list[x] <- min_risk_w
min_risk_return <- mean(total_return(min_risk_w))
#min_return_list[x] <- min_risk_return
efficient_idx <- which(returns >= min_risk_return)
inefficient_idx <- which(returns < min_risk_return)
plot(risks[efficient_idx], returns[efficient_idx],
xlab = "Portfolio risk",
ylab = "Portfolio return",
main = paste("The Efficient Frontier (",ticker[x],",",ticker[y],")"),
ylim = c(-0.1,0.2), xlim = c(0.00, 0.02))
lines(risks[inefficient_idx], returns[inefficient_idx], lty = "dotted")
abline(h = min_risk_return)
text(x = 0.003, y = min_risk_return-0.01, "min variance portfolio")
text(x = 0.006, y = 0.15, "efficient frontier")
print(paste("(",ticker[x],",",ticker[y],")| Rho_12:",round(rho_12,digits=4),"|min_risk_w:",round(min_risk_w,digits=4),"|min_risk_return:",round(min_risk_return,digits=4)))
}
}
ticker <- c('DIS','HPQ','USO','DVN','LMT')
for(x in 1:(length(ticker) - 1)){
s1 <- getSymbols(ticker[x],from = Sys.Date() - 150, to = Sys.Date(),auto.assign = FALSE)
mu1 <- mean(total_returns[[x]])
sigma1 <- sd(total_returns[[x]])
for(y in (x+1):length(ticker)){
s2 <- getSymbols(ticker[y],from = Sys.Date() - 150, to = Sys.Date(),auto.assign = FALSE)
mu2 <- mean(total_returns[[y]])
sigma2 <- sd(total_returns[[y]])
ClosePrices <- merge(Cl(s1),Cl(s2))
# Calculating the correlation coefficient(rho) of each pairs of stocks
rho_12 <- cor(ClosePrices, use = "pairwise.complete.obs")[1,2]
# Printing the rho values
# finding the total return and total risk
total_return <- function(w){
return(w*mu1 + (1-w)*mu2)
}
total_risk <- function(w){
return(w^2*sigma1^2 + (1-w)^2*sigma2^2 + 2*w*(1-w)*rho_12*sigma1*sigma2)
}
# taking all values from -1 to 1 with a step value of 0.01 for weights
weights <- seq(-1, 1, by = 0.01)
returns <- NULL
risks <- NULL
for(w in weights){
returns <- c(returns, total_return(w))
risks <- c(risks, total_risk(w))
}
min_risk_w <- weights[which(risks == min(risks))]
#min_w_list[x] <- min_risk_w
min_risk_return <- mean(total_return(min_risk_w))
#min_return_list[x] <- min_risk_return
efficient_idx <- which(returns >= min_risk_return)
inefficient_idx <- which(returns < min_risk_return)
plot(risks[efficient_idx], returns[efficient_idx],
xlab = "Portfolio risk",
ylab = "Portfolio return",
main = paste("The Efficient Frontier (",ticker[x],",",ticker[y],")"),
ylim = c(-0.1,0.2), xlim = c(0.00, 0.02))
lines(risks[inefficient_idx], returns[inefficient_idx], lty = "dotted")
abline(h = min_risk_return)
text(x = 0.003, y = min_risk_return-0.01, "min variance portfolio")
text(x = 0.006, y = 0.15, "efficient frontier")
print(paste("(",ticker[x],",",ticker[y],")|| Rho_12:",round(rho_12,digits=4),"||min_risk_w:",round(min_risk_w,digits=4),"||min_risk_return:",round(min_risk_return,digits=4)))
}
}
ticker <- c('DIS','HPQ','USO','DVN','LMT')
for(x in 1:(length(ticker) - 1)){
s1 <- getSymbols(ticker[x],from = Sys.Date() - 150, to = Sys.Date(),auto.assign = FALSE)
mu1 <- mean(total_returns[[x]])
sigma1 <- sd(total_returns[[x]])
for(y in (x+1):length(ticker)){
s2 <- getSymbols(ticker[y],from = Sys.Date() - 150, to = Sys.Date(),auto.assign = FALSE)
mu2 <- mean(total_returns[[y]])
sigma2 <- sd(total_returns[[y]])
ClosePrices <- merge(Cl(s1),Cl(s2))
# Calculating the correlation coefficient(rho) of each pairs of stocks
rho_12 <- cor(ClosePrices, use = "pairwise.complete.obs")[1,2]
# Printing the rho values
# finding the total return and total risk
total_return <- function(w){
return(w*mu1 + (1-w)*mu2)
}
total_risk <- function(w){
return(w^2*sigma1^2 + (1-w)^2*sigma2^2 + 2*w*(1-w)*rho_12*sigma1*sigma2)
}
# taking all values from -1 to 1 with a step value of 0.01 for weights
weights <- seq(-1, 1, by = 0.01)
returns <- NULL
risks <- NULL
for(w in weights){
returns <- c(returns, total_return(w))
risks <- c(risks, total_risk(w))
}
min_risk_w <- weights[which(risks == min(risks))]
#min_w_list[x] <- min_risk_w
min_risk_return <- mean(total_return(min_risk_w))
#min_return_list[x] <- min_risk_return
efficient_idx <- which(returns >= min_risk_return)
inefficient_idx <- which(returns < min_risk_return)
plot(risks[efficient_idx], returns[efficient_idx],
xlab = "Portfolio risk",
ylab = "Portfolio return",
main = paste("The Efficient Frontier (",ticker[x],",",ticker[y],")"),
ylim = c(-0.1,0.2), xlim = c(0.00, 0.02))
lines(risks[inefficient_idx], returns[inefficient_idx], lty = "dotted")
abline(h = min_risk_return)
text(x = 0.003, y = min_risk_return-0.01, "min variance portfolio")
text(x = 0.006, y = 0.15, "efficient frontier")
print(paste("(",ticker[x],",",ticker[y],"), Rho_12:",round(rho_12,digits=4),",min_risk_w:",round(min_risk_w,digits=4),",min_risk_return:",round(min_risk_return,digits=4)))
}
}
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(suppressMessages(library(quantmod)))
#intializing the lists
return_list <- list()
daily_mean <- list()
daily_std <- list()
starting_price_ <- list()
total_returns <- list()
sim_returns <- list()
ticker <- c('DIS','HPQ','USO','DVN','LMT')
for(i in ticker){
#getting the stock values for 150 days until today
x <- getSymbols(i,from = Sys.Date() - 150, to = Sys.Date(),auto.assign = FALSE)
return_list[[i]] <- diff(Cl(x))/lag(Cl(x))
N_days <- length(return_list[[i]])
# Finding the mean and std deviation of stocks
m <- mean(return_list[[i]][(N_days - 31):N_days])
daily_mean[[i]] <- m
s <- sd(return_list[[i]][(N_days - 31):N_days])
daily_std[[i]] <- s
#Monte Carlo Simulation for stocks
set.seed(101)
start_price <- Cl(x)[[N_days-30]]
starting_price_[[i]] <- start_price
sim_returns[[i]] <- 1+rnorm(150,mean=m,sd=s)
no_sims <- 1001
days_forward <- 30
sim_return_list <- matrix(0, nrow=no_sims,ncol=days_forward)
sim_price_list <- matrix(0, nrow=no_sims,ncol=days_forward+1)
for (j in 1:no_sims) {
sim_return_list[j,] <- rnorm(days_forward, mean = m, sd = s)
sim_price_list[j,] <- cumprod(c(start_price, 1+sim_return_list[j,]))
}
for(j in 1:no_sims){
total_returns[[i]][j]<-(sim_price_list[j,days_forward+1]-sim_price_list[j,1])/sim_price_list[j,1]
}
}
par(mfrow = c(2, 2))
hist(return_list[['DIS']],main = 'DIS', xlab = 'Daily Returns', col='blue',breaks = 20, freq=TRUE)
hist(return_list[['HPQ']],main = 'HPQ', xlab = 'Daily Returns', col='violet',breaks = 20, freq=TRUE)
hist(return_list[['USO']],main = 'USO', xlab = 'Daily Returns', col='red',breaks = 20, freq=TRUE)
hist(return_list[['DVN']],main = 'DVN', xlab = 'Daily Returns', col='green',breaks = 20, freq=TRUE)
hist(return_list[['LMT']],main = 'LMT', xlab = 'Daily Returns', col='brown',breaks = 20, freq=TRUE)
ticker <- c('DIS','HPQ','USO','DVN','LMT')
for(x in 1:(length(ticker) - 1)){
s1 <- getSymbols(ticker[x],from = Sys.Date() - 150, to = Sys.Date(),auto.assign = FALSE)
mu1 <- mean(total_returns[[x]])
sigma1 <- sd(total_returns[[x]])
for(y in (x+1):length(ticker)){
s2 <- getSymbols(ticker[y],from = Sys.Date() - 150, to = Sys.Date(),auto.assign = FALSE)
mu2 <- mean(total_returns[[y]])
sigma2 <- sd(total_returns[[y]])
ClosePrices <- merge(Cl(s1),Cl(s2))
# Calculating the correlation coefficient(rho) of each pairs of stocks
rho_12 <- cor(ClosePrices, use = "pairwise.complete.obs")[1,2]
# finding the total return and total risk
total_return <- function(w){
return(w*mu1 + (1-w)*mu2)
}
total_risk <- function(w){
return(w^2*sigma1^2 + (1-w)^2*sigma2^2 + 2*w*(1-w)*rho_12*sigma1*sigma2)
}
# taking all values from -1 to 1 with a step value of 0.01 for weights
weights <- seq(-1, 1, by = 0.01)
returns <- NULL
risks <- NULL
#finding the return and risk values for each weights
for(w in weights){
returns <- c(returns, total_return(w))
risks <- c(risks, total_risk(w))
}
#finding the minimum risk weight and the corresponding return
min_risk_w <- weights[which(risks == min(risks))]
min_risk_return <- mean(total_return(min_risk_w))
efficient_idx <- which(returns >= min_risk_return)
inefficient_idx <- which(returns < min_risk_return)
# Plotting the efficient frontier for the stock pairs
plot(risks[efficient_idx], returns[efficient_idx],
xlab = "Portfolio risk",
ylab = "Portfolio return",
main = paste("The Efficient Frontier (",ticker[x],",",ticker[y],")"),
ylim = c(-0.1,0.2), xlim = c(0.00, 0.02))
lines(risks[inefficient_idx], returns[inefficient_idx], lty = "dotted")
abline(h = min_risk_return)
text(x = 0.003, y = min_risk_return-0.01, "min variance portfolio")
text(x = 0.006, y = 0.15, "efficient frontier")
print(paste("(",ticker[x],",",ticker[y],"), Rho_12:",round(rho_12,digits=4),",min_risk_w:",round(min_risk_w,digits=4),",min_risk_return:",round(min_risk_return,digits=4)))
}
}
# comparing the actual returns and simulated returns to evaluate the accuracy of simulation
ticker <- c('DIS','HPQ','USO','DVN','LMT')
per_error <- list()
for(i in ticker){
x <- mean(return_list[[i]][2:104])#the first value is excluded as it is NA
y <- mean(total_returns[[i]][2:104])#the first value is excluded as it is NA
per_error[[i]] <- abs(((x-y)/x))
print(paste('percentage error of ',i,' is ',per_error[[i]]))
}
# comparing the actual returns and simulated returns to evaluate the accuracy of simulation
ticker <- c('DIS','HPQ','USO','DVN','LMT')
per_error <- list()
for(i in ticker){
x <- mean(return_list[[i]][1:104])#the first value is excluded as it is NA
y <- mean(total_returns[[i]][1:104])#the first value is excluded as it is NA
per_error[[i]] <- abs(((x-y)/x))
print(paste('percentage error of ',i,' is ',per_error[[i]]))
}
print(length(return_list))
print(length(return_list[['DIS']]))
print(m)
#print(daily_mean[['DIS']])
#print(m)
print(daily_mean[['DIS']])
print(m)
print(daily_mean[['DIS']])
print(m)
print(daily_mean[['LMT']])
print(m)
print(daily_mean)
print(mean(total_returns[['DIS']]))
print(mean(total_returns[['DIS']][2:103]))
print(mean(total_returns[['DIS']][2:103]))
print(mean(total_returns[['DIS']][2:103]))
# comparing the actual returns and simulated returns to evaluate the accuracy of simulation
ticker <- c('DIS','HPQ','USO','DVN','LMT')
per_error <- list()
for(i in ticker){
x <- mean(return_list[[i]][2:103])#the first value is excluded as it is NA
y <- mean(total_returns[[i]])#the first value is excluded as it is NA
per_error[[i]] <- abs(((x-y)/x))
print(paste('percentage error of ',i,' is ',per_error[[i]]))
}
print(total_returns[['DIS']])
103-30
print((return_list[[i]][103] - return_list[[i]][73]))
print((return_list[[DIS]][103] - return_list[[DIS]][73]))
print(mean(return_list[['DIS']]))
print((return_list[['DIS']][1:5]))
print((return_list[['DIS']][[1:5]]))
print((return_list[['DIS']][1:5]))
print((return_list[[DIS]][1:5]))
print((return_list[['DIS']][1:5]))
print(mean(return_list[['DIS']][1:5]))
# comparing the actual returns and simulated returns to evaluate the accuracy of simulation
ticker <- c('DIS','HPQ','USO','DVN','LMT')
per_error <- list()
for(i in ticker){
x <- mean(return_list[[i]][2:103])#the first value is excluded as it is NA
y <- mean(total_returns[[i]])
per_error[[i]] <- abs(((x-y)/x))
print(paste('percentage error of ',i,' is ',per_error[[i]]))
}
print(mean(return_list[[i]][2:103]))
print(mean(return_list[['DIS']][2:103]))
print(mean(return_list[['DIS']][2:103]))
print(mean(total_returns[['DIS']])
print(mean(return_list[['DIS']][2:103]))
print(mean(total_returns[['DIS']]))
print(mean(return_list[['DIS']][2:103]))
print(mean(total_returns[['DIS']]))
print(mean(return_list[['DIS']][2:103]))
print(mean(total_returns[['DIS']]))
length(return_list[[i]])
# comparing the actual returns and simulated returns to evaluate the accuracy of simulation
ticker <- c('DIS','HPQ','USO','DVN','LMT')
per_error <- list()
l <- length(return_list[[i]])
for(i in ticker){
# actual value
x <- mean(return_list[[i]][2:l])#the first value is excluded as it is NA
# predicted value
y <- mean(total_returns[[i]])
per_error[[i]] <- abs(((x-y)/x))
print(paste('percentage error of ',i,' is ',per_error[[i]]))
}
ticker <- c('DIS','HPQ','USO','DVN','LMT')
for(x in 1:(length(ticker) - 1)){
s1 <- getSymbols(ticker[x],from = Sys.Date() - 150, to = Sys.Date(),auto.assign = FALSE)
mu1 <- mean(total_returns[[x]])
sigma1 <- sd(total_returns[[x]])
for(y in (x+1):length(ticker)){
s2 <- getSymbols(ticker[y],from = Sys.Date() - 150, to = Sys.Date(),auto.assign = FALSE)
mu2 <- mean(total_returns[[y]])
sigma2 <- sd(total_returns[[y]])
ClosePrices <- merge(Cl(s1),Cl(s2))
# Calculating the correlation coefficient(rho) of each pairs of stocks
rho_12 <- cor(ClosePrices, use = "pairwise.complete.obs")[1,2]
# finding the total return and total risk
total_return <- function(w){
return(w*mu1 + (1-w)*mu2)
}
total_risk <- function(w){
return(w^2*sigma1^2 + (1-w)^2*sigma2^2 + 2*w*(1-w)*rho_12*sigma1*sigma2)
}
# taking all values from -1 to 1 with a step value of 0.01 for weights
weights <- seq(-1, 1, by = 0.01)
returns <- NULL
risks <- NULL
#finding the return and risk values for each weights
for(w in weights){
returns <- c(returns, total_return(w))
risks <- c(risks, total_risk(w))
}
#finding the minimum risk weight and the corresponding return
min_risk_w <- weights[which(risks == min(risks))]
min_risk_return <- mean(total_return(min_risk_w))
efficient_idx <- which(returns >= min_risk_return)
inefficient_idx <- which(returns < min_risk_return)
# Plotting the efficient frontier for the stock pairs
plot(risks[efficient_idx], returns[efficient_idx],
xlab = "Portfolio risk",
ylab = "Portfolio return",
main = paste("The Efficient Frontier (",ticker[x],",",ticker[y],")"),
ylim = c(-0.1,0.2), xlim = c(0.00, 0.02))
lines(risks[inefficient_idx], returns[inefficient_idx], lty = "dotted")
abline(h = min_risk_return)
text(x = 0.003, y = min_risk_return-0.01, "min variance portfolio")
text(x = 0.006, y = 0.15, "efficient frontier")
print(paste("(",ticker[x],",",ticker[y],"), Rho_12:",round(rho_12,digits=4),",min_risk_w:",round(min_risk_w,digits=4),",min_risk_return:",round(min_risk_return,digits=4)))
}
}
# comparing the actual returns and simulated returns to evaluate the accuracy of simulation
ticker <- c('DIS','HPQ','USO','DVN','LMT')
per_error <- list()
for(i in ticker){
l <- length(return_list[[i]])
# actual value
x <- mean(return_list[[i]][2:l])#the first value is excluded as it is NA
# predicted value
y <- mean(total_returns[[i]])
per_error[[i]] <- abs(((x-y)/x))
print(paste('percentage error of ',i,' is ',per_error[[i]]))
}
